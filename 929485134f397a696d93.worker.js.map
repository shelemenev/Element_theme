{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./matrix-js-sdk/node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./matrix-js-sdk/node_modules/loglevel/lib/loglevel.js","webpack:///./matrix-js-sdk/node_modules/unhomoglyph/index.js","webpack:///./matrix-js-sdk/node_modules/p-retry/index.js","webpack:///./matrix-js-sdk/node_modules/retry/index.js","webpack:///./matrix-js-sdk/node_modules/retry/lib/retry.js","webpack:///./matrix-js-sdk/node_modules/retry/lib/retry_operation.js","webpack:///./matrix-js-sdk/src/logger.ts","webpack:///./matrix-js-sdk/src/utils.ts","webpack:///./matrix-js-sdk/src/sync-accumulator.ts","webpack:///./matrix-js-sdk/src/indexeddb-helpers.ts","webpack:///./matrix-js-sdk/src/store/indexeddb-local-backend.ts","webpack:///./matrix-js-sdk/src/store/indexeddb-store-worker.ts","webpack:///./matrix-js-sdk/src/indexeddb-worker.ts","webpack:///./matrix-react-sdk/src/workers/indexeddb.worker.ts"],"names":["DEFAULT_NAMESPACE","log","methodFactory","methodName","logLevel","loggerName","args","prefix","unshift","supportedByConsole","console","logger","getLogger","setLevel","levels","DEBUG","extendLogger","withPrefix","existingPrefix","getPrefixedLogger","prefixLogger","encodeParams","params","searchParams","URLSearchParams","key","val","Object","entries","undefined","set","String","toString","decodeParams","query","o","keys","getAll","length","encodeUri","pathTemplate","variables","hasOwnProperty","replace","encodeURIComponent","removeElement","array","fn","reverse","i","splice","isFunction","value","prototype","call","checkObjectHasKeys","obj","Error","checkObjectHasNoAdditionalKeys","allowedKeys","indexOf","deepCopy","JSON","parse","stringify","deepCompare","x","y","isNaN","constructor","RegExp","Date","Array","p","deepSortedObjectEntries","isArray","pairs","k","v","push","sort","a","b","lexicographicCompare","inherits","ctor","superCtor","super_","create","enumerable","writable","configurable","polyfillSuper","thisArg","SuperType","e","fakeSuper","assign","isNumber","isFinite","removeHiddenChars","str","unhomoglyph","normalize","removeHiddenCharsRegex","removeDirectionOverrideChars","toLowerCase","escapeRegExp","string","globToRegexp","glob","extended","pat","match","p1","p2","offset","first","second","ensureNoTrailingSlash","url","endsWith","substr","sleep","ms","Promise","resolve","setTimeout","isNullOrUndefined","defer","reject","promise","_resolve","_reject","promiseMapSeries","promises","promiseTry","chunkPromises","fns","chunkSize","results","all","slice","map","simpleRetryOperation","promiseFn","promiseRetry","attempt","forever","factor","minTimeout","maxTimeout","crypto","setCrypto","c","getCrypto","DEFAULT_ALPHABET","fromCharCode","alphabetPad","s","n","alphabet","padEnd","baseToString","len","BigInt","Number","d","r","Math","abs","stringToBase","result","j","charIndex","charCodeAt","averageBetweenStrings","padN","max","baseA","baseB","avg","nextString","prevString","collator","Intl","Collator","compare","recursivelyAssign","target","source","ignoreNullish","sourceKey","sourceValue","Category","SyncAccumulator","opts","maxTimelineEntries","accumulate","syncResponse","fromDatabase","accumulateRooms","accumulateAccountData","nextBatch","next_batch","account_data","events","forEach","accountData","type","rooms","invite","roomId","accumulateRoom","Invite","join","Join","leave","Leave","category","data","accumulateInviteState","inviteRooms","accumulateJoinState","joinRooms","error","invite_state","currentData","hasAdded","current","state_key","_currentState","_timeline","_accountData","_unreadNotifications","_summary","_readReceipts","unread_notifications","summary","HEROES_KEY","INVITED_COUNT_KEY","JOINED_COUNT_KEY","acc","sum","ephemeral","content","eventId","userId","timeline","limited","state","setState","index","transformedEvent","unsigned","age","_localTs","now","event","token","prev_batch","startIndex","getJSON","forDatabase","roomData","roomJson","evType","receiptEvent","room_id","receiptData","msgData","rollBackState","timelineEvent","prevStateEvent","prev_content","prev_sender","sender","stateKey","ev","accData","roomsData","getNextBatchToken","eventMap","exists","indexedDB","dbName","req","open","onupgradeneeded","onblocked","onsuccess","db","close","deleteDatabase","onerror","VERSION","createDatabase","createObjectStore","keyPath","upgradeSchemaV2","oobMembersStore","createIndex","upgradeSchemaV3","selectQuery","store","keyRange","resultMapper","openCursor","cursor","continue","txnAsPromise","txn","oncomplete","reqAsEventPromise","reqAsPromise","err","reqAsCursorPromise","then","LocalIndexedDBStoreBackend","IndexedDBHelpers","syncAccumulator","connect","disconnected","oldVersion","_isNewlyCreated","onversionchange","init","isNewlyCreated","loadAccountData","loadSyncData","syncData","getOutOfBandMembers","tx","transaction","objectStore","roomIndex","range","IDBKeyRange","only","request","membershipEvents","oobWritten","record","oob_written","setOutOfBandMembers","put","markerObject","clearOutOfBandMembers","readTx","roomRange","minStateKeyProm","openKeyCursor","primaryKey","maxStateKeyProm","minStateKey","maxStateKey","writeTx","writeStore","membersKeyRange","bound","delete","clearDatabase","warn","getSavedSync","copy","utils","setSyncData","syncToDatabase","userTuples","persistUserPresenceEvents","persistAccountData","persistSyncData","clobber","tuples","tuple","getUserPresenceEvents","getClientOptions","options","storeClientOptions","IndexedDBStoreWorker","postMessage","msg","prom","command","backend","seq","ret","message","name","ctx","self","remoteWorker","onmessage","onMessage"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA,+G;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAA0C;AAClD,QAAQ,oCAAO,UAAU;AAAA;AAAA;AAAA;AAAA,oGAAC;AAC1B,KAAK,MAAM,EAIN;AACL,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,qEAAqE;AACrE,WAAW;AACX;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,oDAAoD;AACpD,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;;;;;;;ACxSY;;;AAGb,WAAW,mBAAO,CAAC,CAAa;;AAEhC;AACA,uCAAuC;AACvC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACnBa;AACb,cAAc,mBAAO,CAAC,CAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK,QAAQ;AACb,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,mDAAmD,MAAM;AACzD;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,CAAC;;AAED;AACA;AACA;;AAEA;;;;;;;;;;;;;ACpFA,iBAAiB,mBAAO,CAAC,CAAa,E;;;;;;ACAtC,qBAAqB,mBAAO,CAAC,CAAmB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,oBAAoB;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACnGA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA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","file":"929485134f397a696d93.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","'use strict';\n\n\nvar data = require('./data.json');\n\nfunction escapeRegexp(str) {\n  return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n}\n\nvar REPLACE_RE = RegExp(Object.keys(data).map(escapeRegexp).join('|'), 'g');\n\nfunction replace_fn(match) {\n  return data[match];\n}\n\nfunction unhomoglyph(str) {\n  return str.replace(REPLACE_RE, replace_fn);\n}\n\nmodule.exports = unhomoglyph;\n","'use strict';\nconst retry = require('retry');\n\nconst networkErrorMsgs = [\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\n\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n\toptions = {\n\t\tonFailedAttempt: () => {},\n\t\tretries: 10,\n\t\t...options\n\t};\n\n\tconst operation = retry.operation(options);\n\n\toperation.attempt(async attemptNumber => {\n\t\ttry {\n\t\t\tresolve(await input(attemptNumber));\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) {\n\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error instanceof AbortError) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error.originalError);\n\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\treject(operation.mainError());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports.default = pRetry;\n\nmodule.exports.AbortError = AbortError;\n","module.exports = require('./lib/retry');","var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n","function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n","/*\nCopyright 2018 André Jaenisch\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module logger\n */\n\nimport log, { Logger } from \"loglevel\";\n\n// This is to demonstrate, that you can use any namespace you want.\n// Namespaces allow you to turn on/off the logging for specific parts of the\n// application.\n// An idea would be to control this via an environment variable (on Node.js).\n// See https://www.npmjs.com/package/debug to see how this could be implemented\n// Part of #332 is introducing a logging library in the first place.\nconst DEFAULT_NAMESPACE = \"matrix\";\n\n// because rageshakes in react-sdk hijack the console log, also at module load time,\n// initializing the logger here races with the initialization of rageshakes.\n// to avoid the issue, we override the methodFactory of loglevel that binds to the\n// console methods at initialization time by a factory that looks up the console methods\n// when logging so we always get the current value of console methods.\nlog.methodFactory = function(methodName, logLevel, loggerName) {\n    return function(...args) {\n        /* eslint-disable @typescript-eslint/no-invalid-this */\n        if (this.prefix) {\n            args.unshift(this.prefix);\n        }\n        /* eslint-enable @typescript-eslint/no-invalid-this */\n        const supportedByConsole = methodName === \"error\" ||\n            methodName === \"warn\" ||\n            methodName === \"trace\" ||\n            methodName === \"info\";\n        /* eslint-disable no-console */\n        if (supportedByConsole) {\n            return console[methodName](...args);\n        } else {\n            return console.log(...args);\n        }\n        /* eslint-enable no-console */\n    };\n};\n\n/**\n * Drop-in replacement for <code>console</code> using {@link https://www.npmjs.com/package/loglevel|loglevel}.\n * Can be tailored down to specific use cases if needed.\n */\nexport const logger: PrefixedLogger = log.getLogger(DEFAULT_NAMESPACE);\nlogger.setLevel(log.levels.DEBUG, false);\n\nexport interface PrefixedLogger extends Logger {\n    withPrefix?: (prefix: string) => PrefixedLogger;\n    prefix?: string;\n}\n\nfunction extendLogger(logger: PrefixedLogger) {\n    logger.withPrefix = function(prefix: string): PrefixedLogger {\n        const existingPrefix = this.prefix || \"\";\n        return getPrefixedLogger(existingPrefix + prefix);\n    };\n}\n\nextendLogger(logger);\n\nfunction getPrefixedLogger(prefix: string): PrefixedLogger {\n    const prefixLogger: PrefixedLogger = log.getLogger(`${DEFAULT_NAMESPACE}-${prefix}`);\n    if (prefixLogger.prefix !== prefix) {\n        // Only do this setup work the first time through, as loggers are saved by name.\n        extendLogger(prefixLogger);\n        prefixLogger.prefix = prefix;\n        prefixLogger.setLevel(log.levels.DEBUG, false);\n    }\n    return prefixLogger;\n}\n","/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module.\n * @module utils\n */\n\nimport unhomoglyph from \"unhomoglyph\";\nimport promiseRetry from \"p-retry\";\n\nimport type NodeCrypto from \"crypto\";\n\n/**\n * Encode a dictionary of query parameters.\n * Omits any undefined/null values.\n * @param {Object} params A dict of key/values to encode e.g.\n * {\"foo\": \"bar\", \"baz\": \"taz\"}\n * @return {string} The encoded string e.g. foo=bar&baz=taz\n */\nexport function encodeParams(params: Record<string, string | number | boolean>): string {\n    const searchParams = new URLSearchParams();\n    for (const [key, val] of Object.entries(params)) {\n        if (val !== undefined && val !== null) {\n            searchParams.set(key, String(val));\n        }\n    }\n    return searchParams.toString();\n}\n\nexport type QueryDict = Record<string, string | string[]>;\n\n/**\n * Decode a query string in `application/x-www-form-urlencoded` format.\n * @param {string} query A query string to decode e.g.\n * foo=bar&via=server1&server2\n * @return {Object} The decoded object, if any keys occurred multiple times\n * then the value will be an array of strings, else it will be an array.\n * This behaviour matches Node's qs.parse but is built on URLSearchParams\n * for native web compatibility\n */\nexport function decodeParams(query: string): QueryDict {\n    const o: QueryDict = {};\n    const params = new URLSearchParams(query);\n    for (const key of params.keys()) {\n        const val = params.getAll(key);\n        o[key] = val.length === 1 ? val[0] : val;\n    }\n    return o;\n}\n\n/**\n * Encodes a URI according to a set of template variables. Variables will be\n * passed through encodeURIComponent.\n * @param {string} pathTemplate The path with template variables e.g. '/foo/$bar'.\n * @param {Object} variables The key/value pairs to replace the template\n * variables with. E.g. { \"$bar\": \"baz\" }.\n * @return {string} The result of replacing all template variables e.g. '/foo/baz'.\n */\nexport function encodeUri(pathTemplate: string,\n    variables: Record<string, string>): string {\n    for (const key in variables) {\n        if (!variables.hasOwnProperty(key)) {\n            continue;\n        }\n        pathTemplate = pathTemplate.replace(\n            key, encodeURIComponent(variables[key]),\n        );\n    }\n    return pathTemplate;\n}\n\n/**\n * The removeElement() method removes the first element in the array that\n * satisfies (returns true) the provided testing function.\n * @param {Array} array The array.\n * @param {Function} fn Function to execute on each value in the array, with the\n * function signature <code>fn(element, index, array)</code>. Return true to\n * remove this element and break.\n * @param {boolean} reverse True to search in reverse order.\n * @return {boolean} True if an element was removed.\n */\nexport function removeElement<T>(\n    array: T[],\n    fn: (t: T, i?: number, a?: T[]) => boolean,\n    reverse?: boolean,\n): boolean {\n    let i: number;\n    if (reverse) {\n        for (i = array.length - 1; i >= 0; i--) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    } else {\n        for (i = 0; i < array.length; i++) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Checks if the given thing is a function.\n * @param {*} value The thing to check.\n * @return {boolean} True if it is a function.\n */\nexport function isFunction(value: any) {\n    return Object.prototype.toString.call(value) === \"[object Function]\";\n}\n\n/**\n * Checks that the given object has the specified keys.\n * @param {Object} obj The object to check.\n * @param {string[]} keys The list of keys that 'obj' must have.\n * @throws If the object is missing keys.\n */\n// note using 'keys' here would shadow the 'keys' function defined above\nexport function checkObjectHasKeys(obj: object, keys: string[]) {\n    for (let i = 0; i < keys.length; i++) {\n        if (!obj.hasOwnProperty(keys[i])) {\n            throw new Error(\"Missing required key: \" + keys[i]);\n        }\n    }\n}\n\n/**\n * Checks that the given object has no extra keys other than the specified ones.\n * @param {Object} obj The object to check.\n * @param {string[]} allowedKeys The list of allowed key names.\n * @throws If there are extra keys.\n */\nexport function checkObjectHasNoAdditionalKeys(obj: object, allowedKeys: string[]): void {\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n            continue;\n        }\n        if (allowedKeys.indexOf(key) === -1) {\n            throw new Error(\"Unknown key: \" + key);\n        }\n    }\n}\n\n/**\n * Deep copy the given object. The object MUST NOT have circular references and\n * MUST NOT have functions.\n * @param {Object} obj The object to deep copy.\n * @return {Object} A copy of the object without any references to the original.\n */\nexport function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Compare two objects for equality. The objects MUST NOT have circular references.\n *\n * @param {Object} x The first object to compare.\n * @param {Object} y The second object to compare.\n *\n * @return {boolean} true if the two objects are equal\n */\nexport function deepCompare(x: any, y: any): boolean {\n    // Inspired by\n    // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249\n\n    // Compare primitives and functions.\n    // Also check if both arguments link to the same object.\n    if (x === y) {\n        return true;\n    }\n\n    if (typeof x !== typeof y) {\n        return false;\n    }\n\n    // special-case NaN (since NaN !== NaN)\n    if (typeof x === 'number' && isNaN(x) && isNaN(y)) {\n        return true;\n    }\n\n    // special-case null (since typeof null == 'object', but null.constructor\n    // throws)\n    if (x === null || y === null) {\n        return x === y;\n    }\n\n    // everything else is either an unequal primitive, or an object\n    if (!(x instanceof Object)) {\n        return false;\n    }\n\n    // check they are the same type of object\n    if (x.constructor !== y.constructor || x.prototype !== y.prototype) {\n        return false;\n    }\n\n    // special-casing for some special types of object\n    if (x instanceof RegExp || x instanceof Date) {\n        return x.toString() === y.toString();\n    }\n\n    // the object algorithm works for Array, but it's sub-optimal.\n    if (x instanceof Array) {\n        if (x.length !== y.length) {\n            return false;\n        }\n\n        for (let i = 0; i < x.length; i++) {\n            if (!deepCompare(x[i], y[i])) {\n                return false;\n            }\n        }\n    } else {\n        // disable jshint \"The body of a for in should be wrapped in an if\n        // statement\"\n        /* jshint -W089 */\n\n        // check that all of y's direct keys are in x\n        let p;\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n        }\n\n        // finally, compare each of x's keys with y\n        for (p in y) { // eslint-disable-line guard-for-in\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            if (!deepCompare(x[p], y[p])) {\n                return false;\n            }\n        }\n    }\n    /* jshint +W089 */\n    return true;\n}\n\n// Dev note: This returns a tuple, but jsdoc doesn't like that. https://github.com/jsdoc/jsdoc/issues/1703\n/**\n * Creates an array of object properties/values (entries) then\n * sorts the result by key, recursively. The input object must\n * ensure it does not have loops. If the input is not an object\n * then it will be returned as-is.\n * @param {*} obj The object to get entries of\n * @returns {Array} The entries, sorted by key.\n */\nexport function deepSortedObjectEntries(obj: any): [string, any][] {\n    if (typeof(obj) !== \"object\") return obj;\n\n    // Apparently these are object types...\n    if (obj === null || obj === undefined || Array.isArray(obj)) return obj;\n\n    const pairs: [string, any][] = [];\n    for (const [k, v] of Object.entries(obj)) {\n        pairs.push([k, deepSortedObjectEntries(v)]);\n    }\n\n    // lexicographicCompare is faster than localeCompare, so let's use that.\n    pairs.sort((a, b) => lexicographicCompare(a[0], b[0]));\n\n    return pairs;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another. This is a\n * port of the Node.js implementation with an Object.create polyfill.\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexport function inherits(ctor: Function, superCtor: Function) {\n    // Add util.inherits from Node.js\n    // Source:\n    // https://github.com/joyent/node/blob/master/lib/util.js\n    // Copyright Joyent, Inc. and other Node contributors.\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a\n    // copy of this software and associated documentation files (the\n    // \"Software\"), to deal in the Software without restriction, including\n    // without limitation the rights to use, copy, modify, merge, publish,\n    // distribute, sublicense, and/or sell copies of the Software, and to permit\n    // persons to whom the Software is furnished to do so, subject to the\n    // following conditions:\n    //\n    // The above copyright notice and this permission notice shall be included\n    // in all copies or substantial portions of the Software.\n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n    // USE OR OTHER DEALINGS IN THE SOFTWARE.\n    (ctor as any).super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n}\n\n/**\n * Polyfills inheritance for prototypes by allowing different kinds of\n * super types. Typically prototypes would use `SuperType.call(this, params)`\n * though this doesn't always work in some environments - this function\n * falls back to using `Object.assign()` to clone a constructed copy\n * of the super type onto `thisArg`.\n * @param {any} thisArg The child instance. Modified in place.\n * @param {any} SuperType The type to act as a super instance\n * @param {any} params Arguments to supply to the super type's constructor\n */\nexport function polyfillSuper(thisArg: any, SuperType: any, ...params: any[]) {\n    try {\n        SuperType.call(thisArg, ...params);\n    } catch (e) {\n        // fall back to Object.assign to just clone the thing\n        const fakeSuper = new SuperType(...params);\n        Object.assign(thisArg, fakeSuper);\n    }\n}\n\n/**\n * Returns whether the given value is a finite number without type-coercion\n *\n * @param {*} value the value to test\n * @return {boolean} whether or not value is a finite number without type-coercion\n */\nexport function isNumber(value: any): boolean {\n    return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Removes zero width chars, diacritics and whitespace from the string\n * Also applies an unhomoglyph on the string, to prevent similar looking chars\n * @param {string} str the string to remove hidden characters from\n * @return {string} a string with the hidden characters removed\n */\nexport function removeHiddenChars(str: string): string {\n    if (typeof str === \"string\") {\n        return unhomoglyph(str.normalize('NFD').replace(removeHiddenCharsRegex, ''));\n    }\n    return \"\";\n}\n\n/**\n * Removes the direction override characters from a string\n * @param {string} input\n * @returns string with chars removed\n */\nexport function removeDirectionOverrideChars(str: string): string {\n    if (typeof str === \"string\") {\n        return str.replace(/[\\u202d-\\u202e]/g, '');\n    }\n    return \"\";\n}\n\nexport function normalize(str: string): string {\n    // Note: we have to match the filter with the removeHiddenChars() because the\n    // function strips spaces and other characters (M becomes RN for example, in lowercase).\n    return removeHiddenChars(str.toLowerCase())\n        // Strip all punctuation\n        .replace(/[\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~\\u2000-\\u206f\\u2e00-\\u2e7f]/g, \"\")\n        // We also doubly convert to lowercase to work around oddities of the library.\n        .toLowerCase();\n}\n\n// Regex matching bunch of unicode control characters and otherwise misleading/invisible characters.\n// Includes:\n// various width spaces U+2000 - U+200D\n// LTR and RTL marks U+200E and U+200F\n// LTR/RTL and other directional formatting marks U+202A - U+202F\n// Arabic Letter RTL mark U+061C\n// Combining characters U+0300 - U+036F\n// Zero width no-break space (BOM) U+FEFF\n// eslint-disable-next-line no-misleading-character-class\nconst removeHiddenCharsRegex = /[\\u2000-\\u200F\\u202A-\\u202F\\u0300-\\u036F\\uFEFF\\u061C\\s]/g;\n\nexport function escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nexport function globToRegexp(glob: string, extended?: any): string {\n    extended = typeof(extended) === 'boolean' ? extended : true;\n    // From\n    // https://github.com/matrix-org/synapse/blob/abbee6b29be80a77e05730707602f3bbfc3f38cb/synapse/push/__init__.py#L132\n    // Because micromatch is about 130KB with dependencies,\n    // and minimatch is not much better.\n    let pat = escapeRegExp(glob);\n    pat = pat.replace(/\\\\\\*/g, '.*');\n    pat = pat.replace(/\\?/g, '.');\n    if (extended) {\n        pat = pat.replace(/\\\\\\[(!|)(.*)\\\\]/g, function(match, p1, p2, offset, string) {\n            const first = p1 && '^' || '';\n            const second = p2.replace(/\\\\-/, '-');\n            return '[' + first + second + ']';\n        });\n    }\n    return pat;\n}\n\nexport function ensureNoTrailingSlash(url: string): string {\n    if (url && url.endsWith(\"/\")) {\n        return url.substr(0, url.length - 1);\n    } else {\n        return url;\n    }\n}\n\n// Returns a promise which resolves with a given value after the given number of ms\nexport function sleep<T>(ms: number, value?: T): Promise<T> {\n    return new Promise((resolve => {\n        setTimeout(resolve, ms, value);\n    }));\n}\n\nexport function isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n}\n\nexport interface IDeferred<T> {\n    resolve: (value: T | Promise<T>) => void;\n    reject: (reason?: any) => void;\n    promise: Promise<T>;\n}\n\n// Returns a Deferred\nexport function defer<T = void>(): IDeferred<T> {\n    let resolve;\n    let reject;\n\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    return { resolve, reject, promise };\n}\n\nexport async function promiseMapSeries<T>(\n    promises: T[],\n    fn: (t: T) => void,\n): Promise<void> {\n    for (const o of promises) {\n        await fn(await o);\n    }\n}\n\nexport function promiseTry<T>(fn: () => T | Promise<T>): Promise<T> {\n    return new Promise((resolve) => resolve(fn()));\n}\n\n// Creates and awaits all promises, running no more than `chunkSize` at the same time\nexport async function chunkPromises<T>(fns: (() => Promise<T>)[], chunkSize: number): Promise<T[]> {\n    const results: T[] = [];\n    for (let i = 0; i < fns.length; i += chunkSize) {\n        results.push(...(await Promise.all(fns.slice(i, i + chunkSize).map(fn => fn()))));\n    }\n    return results;\n}\n\n/**\n * Retries the function until it succeeds or is interrupted. The given function must return\n * a promise which throws/rejects on error, otherwise the retry will assume the request\n * succeeded. The promise chain returned will contain the successful promise. The given function\n * should always return a new promise.\n * @param {Function} promiseFn The function to call to get a fresh promise instance. Takes an\n * attempt count as an argument, for logging/debugging purposes.\n * @returns {Promise<T>} The promise for the retried operation.\n */\nexport function simpleRetryOperation<T>(promiseFn: (attempt: number) => Promise<T>): Promise<T> {\n    return promiseRetry((attempt: number) => {\n        return promiseFn(attempt);\n    }, {\n        forever: true,\n        factor: 2,\n        minTimeout: 3000, // ms\n        maxTimeout: 15000, // ms\n    });\n}\n\n// We need to be able to access the Node.js crypto library from within the\n// Matrix SDK without needing to `require(\"crypto\")`, which will fail in\n// browsers.  So `index.ts` will call `setCrypto` to store it, and when we need\n// it, we can call `getCrypto`.\nlet crypto: typeof NodeCrypto;\n\nexport function setCrypto(c: typeof NodeCrypto) {\n    crypto = c;\n}\n\nexport function getCrypto(): typeof NodeCrypto {\n    return crypto;\n}\n\n// String averaging inspired by https://stackoverflow.com/a/2510816\n// Dev note: We make the alphabet a string because it's easier to write syntactically\n// than arrays. Thankfully, strings implement the useful parts of the Array interface\n// anyhow.\n\n/**\n * The default alphabet used by string averaging in this SDK. This matches\n * all usefully printable ASCII characters (0x20-0x7E, inclusive).\n */\nexport const DEFAULT_ALPHABET = (() => {\n    let str = \"\";\n    for (let c = 0x20; c <= 0x7E; c++) {\n        str += String.fromCharCode(c);\n    }\n    return str;\n})();\n\n/**\n * Pads a string using the given alphabet as a base. The returned string will be\n * padded at the end with the first character in the alphabet.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to pad.\n * @param {number} n The length to pad to.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The padded string.\n */\nexport function alphabetPad(s: string, n: number, alphabet = DEFAULT_ALPHABET): string {\n    return s.padEnd(n, alphabet[0]);\n}\n\n/**\n * Converts a baseN number to a string, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {bigint} n The baseN number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The baseN number encoded as a string from the alphabet.\n */\nexport function baseToString(n: bigint, alphabet = DEFAULT_ALPHABET): string {\n    // Developer note: the stringToBase() function offsets the character set by 1 so that repeated\n    // characters (ie: \"aaaaaa\" in a..z) don't come out as zero. We have to reverse this here as\n    // otherwise we'll be wrong in our conversion. Undoing a +1 before an exponent isn't very fun\n    // though, so we rely on a lengthy amount of `x - 1` and integer division rules to reach a\n    // sane state. This also means we have to do rollover detection: see below.\n\n    const len = BigInt(alphabet.length);\n    if (n <= len) {\n        return alphabet[Number(n) - 1] ?? \"\";\n    }\n\n    let d = n / len;\n    let r = Number(n % len) - 1;\n\n    // Rollover detection: if the remainder is negative, it means that the string needs\n    // to roll over by 1 character downwards (ie: in a..z, the previous to \"aaa\" would be\n    // \"zz\").\n    if (r < 0) {\n        d -= BigInt(Math.abs(r)); // abs() is just to be clear what we're doing. Could also `+= r`.\n        r = Number(len) - 1;\n    }\n\n    return baseToString(d, alphabet) + alphabet[r];\n}\n\n/**\n * Converts a string to a baseN number, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to convert to a number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {bigint} The baseN number.\n */\nexport function stringToBase(s: string, alphabet = DEFAULT_ALPHABET): bigint {\n    const len = BigInt(alphabet.length);\n\n    // In our conversion to baseN we do a couple performance optimizations to avoid using\n    // excess CPU and such. To create baseN numbers, the input string needs to be reversed\n    // so the exponents stack up appropriately, as the last character in the unreversed\n    // string has less impact than the first character (in \"abc\" the A is a lot more important\n    // for lexicographic sorts). We also do a trick with the character codes to optimize the\n    // alphabet lookup, avoiding an index scan of `alphabet.indexOf(reversedStr[i])` - we know\n    // that the alphabet and (theoretically) the input string are constrained on character sets\n    // and thus can do simple subtraction to end up with the same result.\n\n    // Developer caution: we carefully cast to BigInt here to avoid losing precision. We cannot\n    // rely on Math.pow() (for example) to be capable of handling our insane numbers.\n\n    let result = BigInt(0);\n    for (let i = s.length - 1, j = BigInt(0); i >= 0; i--, j++) {\n        const charIndex = s.charCodeAt(i) - alphabet.charCodeAt(0);\n\n        // We add 1 to the char index to offset the whole numbering scheme. We unpack this in\n        // the baseToString() function.\n        result += BigInt(1 + charIndex) * (len ** j);\n    }\n    return result;\n}\n\n/**\n * Averages two strings, returning the midpoint between them. This is accomplished by\n * converting both to baseN numbers (where N is the alphabet's length) then averaging\n * those before re-encoding as a string.\n * @param {string} a The first string.\n * @param {string} b The second string.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The midpoint between the strings, as a string.\n */\nexport function averageBetweenStrings(a: string, b: string, alphabet = DEFAULT_ALPHABET): string {\n    const padN = Math.max(a.length, b.length);\n    const baseA = stringToBase(alphabetPad(a, padN, alphabet), alphabet);\n    const baseB = stringToBase(alphabetPad(b, padN, alphabet), alphabet);\n    const avg = (baseA + baseB) / BigInt(2);\n\n    // Detect integer division conflicts. This happens when two numbers are divided too close so\n    // we lose a .5 precision. We need to add a padding character in these cases.\n    if (avg === baseA || avg == baseB) {\n        return baseToString(avg, alphabet) + alphabet[0];\n    }\n\n    return baseToString(avg, alphabet);\n}\n\n/**\n * Finds the next string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then adding 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which follows the input string.\n */\nexport function nextString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) + BigInt(1), alphabet);\n}\n\n/**\n * Finds the previous string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then subtracting 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which precedes the input string.\n */\nexport function prevString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) - BigInt(1), alphabet);\n}\n\n/**\n * Compares strings lexicographically as a sort-safe function.\n * @param {string} a The first (reference) string.\n * @param {string} b The second (compare) string.\n * @returns {number} Negative if the reference string is before the compare string;\n * positive if the reference string is after; and zero if equal.\n */\nexport function lexicographicCompare(a: string, b: string): number {\n    // Dev note: this exists because I'm sad that you can use math operators on strings, so I've\n    // hidden the operation in this function.\n    return (a < b) ? -1 : ((a === b) ? 0 : 1);\n}\n\nconst collator = new Intl.Collator();\n/**\n * Performant language-sensitive string comparison\n * @param a the first string to compare\n * @param b the second string to compare\n */\nexport function compare(a: string, b: string): number {\n    return collator.compare(a, b);\n}\n\n/**\n * This function is similar to Object.assign() but it assigns recursively and\n * allows you to ignore nullish values from the source\n *\n * @param {Object} target\n * @param {Object} source\n * @returns the target object\n */\nexport function recursivelyAssign(target: Object, source: Object, ignoreNullish = false): any {\n    for (const [sourceKey, sourceValue] of Object.entries(source)) {\n        if (target[sourceKey] instanceof Object && sourceValue) {\n            recursivelyAssign(target[sourceKey], sourceValue);\n            continue;\n        }\n        if ((sourceValue !== null && sourceValue !== undefined) || !ignoreNullish) {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n    }\n    return target;\n}\n","/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link SyncAccumulator} for the public class.\n * @module sync-accumulator\n */\n\nimport { logger } from './logger';\nimport { deepCopy } from \"./utils\";\nimport { IContent, IUnsigned } from \"./models/event\";\nimport { IRoomSummary } from \"./models/room-summary\";\nimport { EventType } from \"./@types/event\";\n\ninterface IOpts {\n    maxTimelineEntries?: number;\n}\n\nexport interface IMinimalEvent {\n    content: IContent;\n    type: EventType | string;\n    unsigned?: IUnsigned;\n}\n\nexport interface IEphemeral {\n    events: IMinimalEvent[];\n}\n\n/* eslint-disable camelcase */\ninterface IUnreadNotificationCounts {\n    highlight_count?: number;\n    notification_count?: number;\n}\n\nexport interface IRoomEvent extends IMinimalEvent {\n    event_id: string;\n    sender: string;\n    origin_server_ts: number;\n    unsigned?: IUnsigned;\n    /** @deprecated - legacy field */\n    age?: number;\n}\n\nexport interface IStateEvent extends IRoomEvent {\n    prev_content?: IContent;\n    state_key: string;\n}\n\ninterface IState {\n    events: IStateEvent[];\n}\n\nexport interface ITimeline {\n    events: Array<IRoomEvent | IStateEvent>;\n    limited?: boolean;\n    prev_batch: string;\n}\n\nexport interface IJoinedRoom {\n    summary: IRoomSummary;\n    state: IState;\n    timeline: ITimeline;\n    ephemeral: IEphemeral;\n    account_data: IAccountData;\n    unread_notifications: IUnreadNotificationCounts;\n}\n\nexport interface IStrippedState {\n    content: IContent;\n    state_key: string;\n    type: EventType | string;\n    sender: string;\n}\n\nexport interface IInviteState {\n    events: IStrippedState[];\n}\n\nexport interface IInvitedRoom {\n    invite_state: IInviteState;\n}\n\nexport interface ILeftRoom {\n    state: IState;\n    timeline: ITimeline;\n    account_data: IAccountData;\n}\n\nexport interface IRooms {\n    [Category.Join]: Record<string, IJoinedRoom>;\n    [Category.Invite]: Record<string, IInvitedRoom>;\n    [Category.Leave]: Record<string, ILeftRoom>;\n}\n\ninterface IPresence {\n    events: IMinimalEvent[];\n}\n\ninterface IAccountData {\n    events: IMinimalEvent[];\n}\n\ninterface IToDeviceEvent {\n    content: IContent;\n    sender: string;\n    type: string;\n}\n\ninterface IToDevice {\n    events: IToDeviceEvent[];\n}\n\ninterface IDeviceLists {\n    changed: string[];\n    left: string[];\n}\n\nexport interface ISyncResponse {\n    next_batch: string;\n    rooms: IRooms;\n    presence?: IPresence;\n    account_data: IAccountData;\n    to_device?: IToDevice;\n    device_lists?: IDeviceLists;\n    device_one_time_keys_count?: Record<string, number>;\n}\n/* eslint-enable camelcase */\n\nexport enum Category {\n    Invite = \"invite\",\n    Leave = \"leave\",\n    Join = \"join\",\n}\n\ninterface IRoom {\n    _currentState: { [eventType: string]: { [stateKey: string]: IStateEvent } };\n    _timeline: {\n        event: IRoomEvent | IStateEvent;\n        token: string | null;\n    }[];\n    _summary: Partial<IRoomSummary>;\n    _accountData: { [eventType: string]: IMinimalEvent };\n    _unreadNotifications: Partial<IUnreadNotificationCounts>;\n    _readReceipts: {\n        [userId: string]: {\n            data: IMinimalEvent;\n            eventId: string;\n        };\n    };\n}\n\nexport interface ISyncData {\n    nextBatch: string;\n    accountData: IMinimalEvent[];\n    roomsData: IRooms;\n}\n\n/**\n * The purpose of this class is to accumulate /sync responses such that a\n * complete \"initial\" JSON response can be returned which accurately represents\n * the sum total of the /sync responses accumulated to date. It only handles\n * room data: that is, everything under the \"rooms\" top-level key.\n *\n * This class is used when persisting room data so a complete /sync response can\n * be loaded from disk and incremental syncs can be performed on the server,\n * rather than asking the server to do an initial sync on startup.\n */\nexport class SyncAccumulator {\n    private accountData: Record<string, IMinimalEvent> = {}; // $event_type: Object\n    private inviteRooms: Record<string, IInvitedRoom> = {}; // $roomId: { ... sync 'invite' json data ... }\n    private joinRooms: { [roomId: string]: IRoom } = {};\n    // the /sync token which corresponds to the last time rooms were\n    // accumulated. We remember this so that any caller can obtain a\n    // coherent /sync response and know at what point they should be\n    // streaming from without losing events.\n    private nextBatch: string = null;\n\n    /**\n     * @param {Object} opts\n     * @param {Number=} opts.maxTimelineEntries The ideal maximum number of\n     * timeline entries to keep in the sync response. This is best-effort, as\n     * clients do not always have a back-pagination token for each event, so\n     * it's possible there may be slightly *less* than this value. There will\n     * never be more. This cannot be 0 or else it makes it impossible to scroll\n     * back in a room. Default: 50.\n     */\n    constructor(private readonly opts: IOpts = {}) {\n        this.opts.maxTimelineEntries = this.opts.maxTimelineEntries || 50;\n    }\n\n    public accumulate(syncResponse: ISyncResponse, fromDatabase = false): void {\n        this.accumulateRooms(syncResponse, fromDatabase);\n        this.accumulateAccountData(syncResponse);\n        this.nextBatch = syncResponse.next_batch;\n    }\n\n    private accumulateAccountData(syncResponse: ISyncResponse): void {\n        if (!syncResponse.account_data || !syncResponse.account_data.events) {\n            return;\n        }\n        // Clobbers based on event type.\n        syncResponse.account_data.events.forEach((e) => {\n            this.accountData[e.type] = e;\n        });\n    }\n\n    /**\n     * Accumulate incremental /sync room data.\n     * @param {Object} syncResponse the complete /sync JSON\n     * @param {boolean} fromDatabase True if the sync response is one saved to the database\n     */\n    private accumulateRooms(syncResponse: ISyncResponse, fromDatabase = false): void {\n        if (!syncResponse.rooms) {\n            return;\n        }\n        if (syncResponse.rooms.invite) {\n            Object.keys(syncResponse.rooms.invite).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Invite, syncResponse.rooms.invite[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.join) {\n            Object.keys(syncResponse.rooms.join).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Join, syncResponse.rooms.join[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.leave) {\n            Object.keys(syncResponse.rooms.leave).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Leave, syncResponse.rooms.leave[roomId], fromDatabase);\n            });\n        }\n    }\n\n    private accumulateRoom(roomId: string, category: Category.Invite, data: IInvitedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Join, data: IJoinedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Leave, data: ILeftRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category, data: any, fromDatabase = false): void {\n        // Valid /sync state transitions\n        //       +--------+ <======+            1: Accept an invite\n        //   +== | INVITE |        | (5)        2: Leave a room\n        //   |   +--------+ =====+ |            3: Join a public room previously\n        //   |(1)            (4) | |               left (handle as if new room)\n        //   V         (2)       V |            4: Reject an invite\n        // +------+ ========> +--------+         5: Invite to a room previously\n        // | JOIN |    (3)    | LEAVE* |            left (handle as if new room)\n        // +------+ <======== +--------+\n        //\n        // * equivalent to \"no state\"\n        switch (category) {\n            case Category.Invite: // (5)\n                this.accumulateInviteState(roomId, data as IInvitedRoom);\n                break;\n\n            case Category.Join:\n                if (this.inviteRooms[roomId]) { // (1)\n                    // was previously invite, now join. We expect /sync to give\n                    // the entire state and timeline on 'join', so delete previous\n                    // invite state\n                    delete this.inviteRooms[roomId];\n                }\n                // (3)\n                this.accumulateJoinState(roomId, data as IJoinedRoom, fromDatabase);\n                break;\n\n            case Category.Leave:\n                if (this.inviteRooms[roomId]) { // (4)\n                    delete this.inviteRooms[roomId];\n                } else { // (2)\n                    delete this.joinRooms[roomId];\n                }\n                break;\n\n            default:\n                logger.error(\"Unknown cateogory: \", category);\n        }\n    }\n\n    private accumulateInviteState(roomId: string, data: IInvitedRoom): void {\n        if (!data.invite_state || !data.invite_state.events) { // no new data\n            return;\n        }\n        if (!this.inviteRooms[roomId]) {\n            this.inviteRooms[roomId] = {\n                invite_state: data.invite_state,\n            };\n            return;\n        }\n        // accumulate extra keys for invite->invite transitions\n        // clobber based on event type / state key\n        // We expect invite_state to be small, so just loop over the events\n        const currentData = this.inviteRooms[roomId];\n        data.invite_state.events.forEach((e) => {\n            let hasAdded = false;\n            for (let i = 0; i < currentData.invite_state.events.length; i++) {\n                const current = currentData.invite_state.events[i];\n                if (current.type === e.type && current.state_key == e.state_key) {\n                    currentData.invite_state.events[i] = e; // update\n                    hasAdded = true;\n                }\n            }\n            if (!hasAdded) {\n                currentData.invite_state.events.push(e);\n            }\n        });\n    }\n\n    // Accumulate timeline and state events in a room.\n    private accumulateJoinState(roomId: string, data: IJoinedRoom, fromDatabase = false): void {\n        // We expect this function to be called a lot (every /sync) so we want\n        // this to be fast. /sync stores events in an array but we often want\n        // to clobber based on type/state_key. Rather than convert arrays to\n        // maps all the time, just keep private maps which contain\n        // the actual current accumulated sync state, and array-ify it when\n        // getJSON() is called.\n\n        // State resolution:\n        // The 'state' key is the delta from the previous sync (or start of time\n        // if no token was supplied), to the START of the timeline. To obtain\n        // the current state, we need to \"roll forward\" state by reading the\n        // timeline. We want to store the current state so we can drop events\n        // out the end of the timeline based on opts.maxTimelineEntries.\n        //\n        //      'state'     'timeline'     current state\n        // |-------x<======================>x\n        //          T   I   M   E\n        //\n        // When getJSON() is called, we 'roll back' the current state by the\n        // number of entries in the timeline to work out what 'state' should be.\n\n        // Back-pagination:\n        // On an initial /sync, the server provides a back-pagination token for\n        // the start of the timeline. When /sync deltas come down, they also\n        // include back-pagination tokens for the start of the timeline. This\n        // means not all events in the timeline have back-pagination tokens, as\n        // it is only the ones at the START of the timeline which have them.\n        // In order for us to have a valid timeline (and back-pagination token\n        // to match), we need to make sure that when we remove old timeline\n        // events, that we roll forward to an event which has a back-pagination\n        // token. This means we can't keep a strict sliding-window based on\n        // opts.maxTimelineEntries, and we may have a few less. We should never\n        // have more though, provided that the /sync limit is less than or equal\n        // to opts.maxTimelineEntries.\n\n        if (!this.joinRooms[roomId]) {\n            // Create truly empty objects so event types of 'hasOwnProperty' and co\n            // don't cause this code to break.\n            this.joinRooms[roomId] = {\n                _currentState: Object.create(null),\n                _timeline: [],\n                _accountData: Object.create(null),\n                _unreadNotifications: {},\n                _summary: {},\n                _readReceipts: {},\n            };\n        }\n        const currentData = this.joinRooms[roomId];\n\n        if (data.account_data && data.account_data.events) {\n            // clobber based on type\n            data.account_data.events.forEach((e) => {\n                currentData._accountData[e.type] = e;\n            });\n        }\n\n        // these probably clobber, spec is unclear.\n        if (data.unread_notifications) {\n            currentData._unreadNotifications = data.unread_notifications;\n        }\n        if (data.summary) {\n            const HEROES_KEY = \"m.heroes\";\n            const INVITED_COUNT_KEY = \"m.invited_member_count\";\n            const JOINED_COUNT_KEY = \"m.joined_member_count\";\n\n            const acc = currentData._summary;\n            const sum = data.summary;\n            acc[HEROES_KEY] = sum[HEROES_KEY] || acc[HEROES_KEY];\n            acc[JOINED_COUNT_KEY] = sum[JOINED_COUNT_KEY] || acc[JOINED_COUNT_KEY];\n            acc[INVITED_COUNT_KEY] = sum[INVITED_COUNT_KEY] || acc[INVITED_COUNT_KEY];\n        }\n\n        if (data.ephemeral && data.ephemeral.events) {\n            data.ephemeral.events.forEach((e) => {\n                // We purposefully do not persist m.typing events.\n                // Technically you could refresh a browser before the timer on a\n                // typing event is up, so it'll look like you aren't typing when\n                // you really still are. However, the alternative is worse. If\n                // we do persist typing events, it will look like people are\n                // typing forever until someone really does start typing (which\n                // will prompt Synapse to send down an actual m.typing event to\n                // clobber the one we persisted).\n                if (e.type !== \"m.receipt\" || !e.content) {\n                    // This means we'll drop unknown ephemeral events but that\n                    // seems okay.\n                    return;\n                }\n                // Handle m.receipt events. They clobber based on:\n                //   (user_id, receipt_type)\n                // but they are keyed in the event as:\n                //   content:{ $event_id: { $receipt_type: { $user_id: {json} }}}\n                // so store them in the former so we can accumulate receipt deltas\n                // quickly and efficiently (we expect a lot of them). Fold the\n                // receipt type into the key name since we only have 1 at the\n                // moment (m.read) and nested JSON objects are slower and more\n                // of a hassle to work with. We'll inflate this back out when\n                // getJSON() is called.\n                Object.keys(e.content).forEach((eventId) => {\n                    if (!e.content[eventId][\"m.read\"]) {\n                        return;\n                    }\n                    Object.keys(e.content[eventId][\"m.read\"]).forEach((userId) => {\n                        // clobber on user ID\n                        currentData._readReceipts[userId] = {\n                            data: e.content[eventId][\"m.read\"][userId],\n                            eventId: eventId,\n                        };\n                    });\n                });\n            });\n        }\n\n        // if we got a limited sync, we need to remove all timeline entries or else\n        // we will have gaps in the timeline.\n        if (data.timeline && data.timeline.limited) {\n            currentData._timeline = [];\n        }\n\n        // Work out the current state. The deltas need to be applied in the order:\n        // - existing state which didn't come down /sync.\n        // - State events under the 'state' key.\n        // - State events in the 'timeline'.\n        if (data.state && data.state.events) {\n            data.state.events.forEach((e) => {\n                setState(currentData._currentState, e);\n            });\n        }\n        if (data.timeline && data.timeline.events) {\n            data.timeline.events.forEach((e, index) => {\n                // this nops if 'e' isn't a state event\n                setState(currentData._currentState, e);\n                // append the event to the timeline. The back-pagination token\n                // corresponds to the first event in the timeline\n                let transformedEvent: IRoomEvent & { _localTs?: number };\n                if (!fromDatabase) {\n                    transformedEvent = Object.assign({}, e);\n                    if (transformedEvent.unsigned !== undefined) {\n                        transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                    }\n                    const age = e.unsigned ? e.unsigned.age : e.age;\n                    if (age !== undefined) transformedEvent._localTs = Date.now() - age;\n                } else {\n                    transformedEvent = e;\n                }\n\n                currentData._timeline.push({\n                    event: transformedEvent,\n                    token: index === 0 ? data.timeline.prev_batch : null,\n                });\n            });\n        }\n\n        // attempt to prune the timeline by jumping between events which have\n        // pagination tokens.\n        if (currentData._timeline.length > this.opts.maxTimelineEntries) {\n            const startIndex = (\n                currentData._timeline.length - this.opts.maxTimelineEntries\n            );\n            for (let i = startIndex; i < currentData._timeline.length; i++) {\n                if (currentData._timeline[i].token) {\n                    // keep all events after this, including this one\n                    currentData._timeline = currentData._timeline.slice(\n                        i, currentData._timeline.length,\n                    );\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Return everything under the 'rooms' key from a /sync response which\n     * represents all room data that should be stored. This should be paired\n     * with the sync token which represents the most recent /sync response\n     * provided to accumulate().\n     * @param {boolean} forDatabase True to generate a sync to be saved to storage\n     * @return {Object} An object with a \"nextBatch\", \"roomsData\" and \"accountData\"\n     * keys.\n     * The \"nextBatch\" key is a string which represents at what point in the\n     * /sync stream the accumulator reached. This token should be used when\n     * restarting a /sync stream at startup. Failure to do so can lead to missing\n     * events. The \"roomsData\" key is an Object which represents the entire\n     * /sync response from the 'rooms' key onwards. The \"accountData\" key is\n     * a list of raw events which represent global account data.\n     */\n    public getJSON(forDatabase = false): ISyncData {\n        const data: IRooms = {\n            join: {},\n            invite: {},\n            // always empty. This is set by /sync when a room was previously\n            // in 'invite' or 'join'. On fresh startup, the client won't know\n            // about any previous room being in 'invite' or 'join' so we can\n            // just omit mentioning it at all, even if it has previously come\n            // down /sync.\n            // The notable exception is when a client is kicked or banned:\n            // we may want to hold onto that room so the client can clearly see\n            // why their room has disappeared. We don't persist it though because\n            // it is unclear *when* we can safely remove the room from the DB.\n            // Instead, we assume that if you're loading from the DB, you've\n            // refreshed the page, which means you've seen the kick/ban already.\n            leave: {},\n        };\n        Object.keys(this.inviteRooms).forEach((roomId) => {\n            data.invite[roomId] = this.inviteRooms[roomId];\n        });\n        Object.keys(this.joinRooms).forEach((roomId) => {\n            const roomData = this.joinRooms[roomId];\n            const roomJson = {\n                ephemeral: { events: [] },\n                account_data: { events: [] },\n                state: { events: [] },\n                timeline: {\n                    events: [],\n                    prev_batch: null,\n                },\n                unread_notifications: roomData._unreadNotifications,\n                summary: roomData._summary as IRoomSummary,\n            };\n            // Add account data\n            Object.keys(roomData._accountData).forEach((evType) => {\n                roomJson.account_data.events.push(roomData._accountData[evType]);\n            });\n\n            // Add receipt data\n            const receiptEvent = {\n                type: \"m.receipt\",\n                room_id: roomId,\n                content: {\n                    // $event_id: { \"m.read\": { $user_id: $json } }\n                },\n            };\n            Object.keys(roomData._readReceipts).forEach((userId) => {\n                const receiptData = roomData._readReceipts[userId];\n                if (!receiptEvent.content[receiptData.eventId]) {\n                    receiptEvent.content[receiptData.eventId] = {\n                        \"m.read\": {},\n                    };\n                }\n                receiptEvent.content[receiptData.eventId][\"m.read\"][userId] = (\n                    receiptData.data\n                );\n            });\n            // add only if we have some receipt data\n            if (Object.keys(receiptEvent.content).length > 0) {\n                roomJson.ephemeral.events.push(receiptEvent);\n            }\n\n            // Add timeline data\n            roomData._timeline.forEach((msgData) => {\n                if (!roomJson.timeline.prev_batch) {\n                    // the first event we add to the timeline MUST match up to\n                    // the prev_batch token.\n                    if (!msgData.token) {\n                        return; // this shouldn't happen as we prune constantly.\n                    }\n                    roomJson.timeline.prev_batch = msgData.token;\n                }\n\n                let transformedEvent: (IRoomEvent | IStateEvent) & { _localTs?: number };\n                if (!forDatabase && msgData.event[\"_localTs\"]) {\n                    // This means we have to copy each event so we can fix it up to\n                    // set a correct 'age' parameter whilst keeping the local timestamp\n                    // on our stored event. If this turns out to be a bottleneck, it could\n                    // be optimised either by doing this in the main process after the data\n                    // has been structured-cloned to go between the worker & main process,\n                    // or special-casing data from saved syncs to read the local timestamp\n                    // directly rather than turning it into age to then immediately be\n                    // transformed back again into a local timestamp.\n                    transformedEvent = Object.assign({}, msgData.event);\n                    if (transformedEvent.unsigned !== undefined) {\n                        transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                    }\n                    delete transformedEvent._localTs;\n                    transformedEvent.unsigned = transformedEvent.unsigned || {};\n                    transformedEvent.unsigned.age = Date.now() - msgData.event[\"_localTs\"];\n                } else {\n                    transformedEvent = msgData.event;\n                }\n                roomJson.timeline.events.push(transformedEvent);\n            });\n\n            // Add state data: roll back current state to the start of timeline,\n            // by \"reverse clobbering\" from the end of the timeline to the start.\n            // Convert maps back into arrays.\n            const rollBackState = Object.create(null);\n            for (let i = roomJson.timeline.events.length - 1; i >=0; i--) {\n                const timelineEvent = roomJson.timeline.events[i];\n                if (timelineEvent.state_key === null ||\n                        timelineEvent.state_key === undefined) {\n                    continue; // not a state event\n                }\n                // since we're going back in time, we need to use the previous\n                // state value else we'll break causality. We don't have the\n                // complete previous state event, so we need to create one.\n                const prevStateEvent = deepCopy(timelineEvent);\n                if (prevStateEvent.unsigned) {\n                    if (prevStateEvent.unsigned.prev_content) {\n                        prevStateEvent.content = prevStateEvent.unsigned.prev_content;\n                    }\n                    if (prevStateEvent.unsigned.prev_sender) {\n                        prevStateEvent.sender = prevStateEvent.unsigned.prev_sender;\n                    }\n                }\n                setState(rollBackState, prevStateEvent);\n            }\n            Object.keys(roomData._currentState).forEach((evType) => {\n                Object.keys(roomData._currentState[evType]).forEach((stateKey) => {\n                    let ev = roomData._currentState[evType][stateKey];\n                    if (rollBackState[evType] && rollBackState[evType][stateKey]) {\n                        // use the reverse clobbered event instead.\n                        ev = rollBackState[evType][stateKey];\n                    }\n                    roomJson.state.events.push(ev);\n                });\n            });\n            data.join[roomId] = roomJson;\n        });\n\n        // Add account data\n        const accData: IMinimalEvent[] = [];\n        Object.keys(this.accountData).forEach((evType) => {\n            accData.push(this.accountData[evType]);\n        });\n\n        return {\n            nextBatch: this.nextBatch,\n            roomsData: data,\n            accountData: accData,\n        };\n    }\n\n    public getNextBatchToken(): string {\n        return this.nextBatch;\n    }\n}\n\nfunction setState(eventMap: Record<string, Record<string, IStateEvent>>, event: IRoomEvent | IStateEvent): void {\n    if ((event as IStateEvent).state_key === null || (event as IStateEvent).state_key === undefined || !event.type) {\n        return;\n    }\n    if (!eventMap[event.type]) {\n        eventMap[event.type] = Object.create(null);\n    }\n    eventMap[event.type][(event as IStateEvent).state_key] = event as IStateEvent;\n}\n","/*\nCopyright 2019 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Check if an IndexedDB database exists. The only way to do so is to try opening it, so\n * we do that and then delete it did not exist before.\n *\n * @param {Object} indexedDB The `indexedDB` interface\n * @param {string} dbName The database name to test for\n * @returns {boolean} Whether the database exists\n */\nexport function exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n        let exists = true;\n        const req = indexedDB.open(dbName);\n        req.onupgradeneeded = () => {\n            // Since we did not provide an explicit version when opening, this event\n            // should only fire if the DB did not exist before at any version.\n            exists = false;\n        };\n        req.onblocked = () => reject(req.error);\n        req.onsuccess = () => {\n            const db = req.result;\n            db.close();\n            if (!exists) {\n                // The DB did not exist before, but has been created as part of this\n                // existence check. Delete it now to restore previous state. Delete can\n                // actually take a while to complete in some browsers, so don't wait for\n                // it. This won't block future open calls that a store might issue next to\n                // properly set up the DB.\n                indexedDB.deleteDatabase(dbName);\n            }\n            resolve(exists);\n        };\n        req.onerror = ev => reject(req.error);\n    });\n}\n","/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IMinimalEvent, ISyncData, ISyncResponse, SyncAccumulator } from \"../sync-accumulator\";\nimport * as utils from \"../utils\";\nimport * as IndexedDBHelpers from \"../indexeddb-helpers\";\nimport { logger } from '../logger';\nimport { IEvent, IStartClientOpts } from \"..\";\nimport { ISavedSync } from \"./index\";\nimport { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";\n\nconst VERSION = 3;\n\nfunction createDatabase(db: IDBDatabase): void {\n    // Make user store, clobber based on user ID. (userId property of User objects)\n    db.createObjectStore(\"users\", { keyPath: [\"userId\"] });\n\n    // Make account data store, clobber based on event type.\n    // (event.type property of MatrixEvent objects)\n    db.createObjectStore(\"accountData\", { keyPath: [\"type\"] });\n\n    // Make /sync store (sync tokens, room data, etc), always clobber (const key).\n    db.createObjectStore(\"sync\", { keyPath: [\"clobber\"] });\n}\n\nfunction upgradeSchemaV2(db: IDBDatabase): void {\n    const oobMembersStore = db.createObjectStore(\n        \"oob_membership_events\", {\n            keyPath: [\"room_id\", \"state_key\"],\n        });\n    oobMembersStore.createIndex(\"room\", \"room_id\");\n}\n\nfunction upgradeSchemaV3(db: IDBDatabase): void {\n    db.createObjectStore(\"client_options\",\n        { keyPath: [\"clobber\"] });\n}\n\n/**\n * Helper method to collect results from a Cursor and promiseify it.\n * @param {ObjectStore|Index} store The store to perform openCursor on.\n * @param {IDBKeyRange=} keyRange Optional key range to apply on the cursor.\n * @param {Function} resultMapper A function which is repeatedly called with a\n * Cursor.\n * Return the data you want to keep.\n * @return {Promise<T[]>} Resolves to an array of whatever you returned from\n * resultMapper.\n */\nfunction selectQuery<T>(\n    store: IDBObjectStore,\n    keyRange: IDBKeyRange | IDBValidKey | undefined,\n    resultMapper: (cursor: IDBCursorWithValue) => T,\n): Promise<T[]> {\n    const query = store.openCursor(keyRange);\n    return new Promise((resolve, reject) => {\n        const results: T[] = [];\n        query.onerror = () => {\n            reject(new Error(\"Query failed: \" + query.error));\n        };\n        // collect results\n        query.onsuccess = () => {\n            const cursor = query.result;\n            if (!cursor) {\n                resolve(results);\n                return; // end of results\n            }\n            results.push(resultMapper(cursor));\n            cursor.continue();\n        };\n    });\n}\n\nfunction txnAsPromise(txn: IDBTransaction): Promise<Event> {\n    return new Promise((resolve, reject) => {\n        txn.oncomplete = function(event) {\n            resolve(event);\n        };\n        txn.onerror = function() {\n            reject(txn.error);\n        };\n    });\n}\n\nfunction reqAsEventPromise(req: IDBRequest): Promise<Event> {\n    return new Promise((resolve, reject) => {\n        req.onsuccess = function(event) {\n            resolve(event);\n        };\n        req.onerror = function() {\n            reject(req.error);\n        };\n    });\n}\n\nfunction reqAsPromise(req: IDBRequest): Promise<IDBRequest> {\n    return new Promise((resolve, reject) => {\n        req.onsuccess = () => resolve(req);\n        req.onerror = (err) => reject(err);\n    });\n}\n\nfunction reqAsCursorPromise(req: IDBRequest<IDBCursor | null>): Promise<IDBCursor> {\n    return reqAsEventPromise(req).then((event) => req.result);\n}\n\nexport class LocalIndexedDBStoreBackend implements IIndexedDBBackend {\n    public static exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n        dbName = \"matrix-js-sdk:\" + (dbName || \"default\");\n        return IndexedDBHelpers.exists(indexedDB, dbName);\n    }\n\n    private readonly dbName: string;\n    private readonly syncAccumulator: SyncAccumulator;\n    private db: IDBDatabase = null;\n    private disconnected = true;\n    private _isNewlyCreated = false;\n\n    /**\n     * Does the actual reading from and writing to the indexeddb\n     *\n     * Construct a new Indexed Database store backend. This requires a call to\n     * <code>connect()</code> before this store can be used.\n     * @constructor\n     * @param {Object} indexedDB The Indexed DB interface e.g\n     * <code>window.indexedDB</code>\n     * @param {string=} dbName Optional database name. The same name must be used\n     * to open the same database.\n     */\n    constructor(private readonly indexedDB: IDBFactory, dbName: string) {\n        this.dbName = \"matrix-js-sdk:\" + (dbName || \"default\");\n        this.syncAccumulator = new SyncAccumulator();\n    }\n\n    /**\n     * Attempt to connect to the database. This can fail if the user does not\n     * grant permission.\n     * @return {Promise} Resolves if successfully connected.\n     */\n    public connect(): Promise<void> {\n        if (!this.disconnected) {\n            logger.log(`LocalIndexedDBStoreBackend.connect: already connected or connecting`);\n            return Promise.resolve();\n        }\n\n        this.disconnected = false;\n\n        logger.log(`LocalIndexedDBStoreBackend.connect: connecting...`);\n        const req = this.indexedDB.open(this.dbName, VERSION);\n        req.onupgradeneeded = (ev) => {\n            const db = req.result;\n            const oldVersion = ev.oldVersion;\n            logger.log(\n                `LocalIndexedDBStoreBackend.connect: upgrading from ${oldVersion}`,\n            );\n            if (oldVersion < 1) { // The database did not previously exist.\n                this._isNewlyCreated = true;\n                createDatabase(db);\n            }\n            if (oldVersion < 2) {\n                upgradeSchemaV2(db);\n            }\n            if (oldVersion < 3) {\n                upgradeSchemaV3(db);\n            }\n            // Expand as needed.\n        };\n\n        req.onblocked = () => {\n            logger.log(`can't yet open LocalIndexedDBStoreBackend because it is open elsewhere`);\n        };\n\n        logger.log(`LocalIndexedDBStoreBackend.connect: awaiting connection...`);\n        return reqAsEventPromise(req).then(() => {\n            logger.log(`LocalIndexedDBStoreBackend.connect: connected`);\n            this.db = req.result;\n\n            // add a poorly-named listener for when deleteDatabase is called\n            // so we can close our db connections.\n            this.db.onversionchange = () => {\n                this.db.close();\n            };\n\n            return this.init();\n        });\n    }\n\n    /** @return {boolean} whether or not the database was newly created in this session. */\n    public isNewlyCreated(): Promise<boolean> {\n        return Promise.resolve(this._isNewlyCreated);\n    }\n\n    /**\n     * Having connected, load initial data from the database and prepare for use\n     * @return {Promise} Resolves on success\n     */\n    private init() {\n        return Promise.all([\n            this.loadAccountData(),\n            this.loadSyncData(),\n        ]).then(([accountData, syncData]) => {\n            logger.log(`LocalIndexedDBStoreBackend: loaded initial data`);\n            this.syncAccumulator.accumulate({\n                next_batch: syncData.nextBatch,\n                rooms: syncData.roomsData,\n                account_data: {\n                    events: accountData,\n                },\n            }, true);\n        });\n    }\n\n    /**\n     * Returns the out-of-band membership events for this room that\n     * were previously loaded.\n     * @param {string} roomId\n     * @returns {Promise<event[]>} the events, potentially an empty array if OOB loading didn't yield any new members\n     * @returns {null} in case the members for this room haven't been stored yet\n     */\n    public getOutOfBandMembers(roomId: string): Promise<IEvent[] | null> {\n        return new Promise<IEvent[] | null>((resolve, reject) => {\n            const tx = this.db.transaction([\"oob_membership_events\"], \"readonly\");\n            const store = tx.objectStore(\"oob_membership_events\");\n            const roomIndex = store.index(\"room\");\n            const range = IDBKeyRange.only(roomId);\n            const request = roomIndex.openCursor(range);\n\n            const membershipEvents: IEvent[] = [];\n            // did we encounter the oob_written marker object\n            // amongst the results? That means OOB member\n            // loading already happened for this room\n            // but there were no members to persist as they\n            // were all known already\n            let oobWritten = false;\n\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (!cursor) {\n                    // Unknown room\n                    if (!membershipEvents.length && !oobWritten) {\n                        return resolve(null);\n                    }\n                    return resolve(membershipEvents);\n                }\n                const record = cursor.value;\n                if (record.oob_written) {\n                    oobWritten = true;\n                } else {\n                    membershipEvents.push(record);\n                }\n                cursor.continue();\n            };\n            request.onerror = (err) => {\n                reject(err);\n            };\n        }).then((events) => {\n            logger.log(`LL: got ${events && events.length} membershipEvents from storage for room ${roomId} ...`);\n            return events;\n        });\n    }\n\n    /**\n     * Stores the out-of-band membership events for this room. Note that\n     * it still makes sense to store an empty array as the OOB status for the room is\n     * marked as fetched, and getOutOfBandMembers will return an empty array instead of null\n     * @param {string} roomId\n     * @param {event[]} membershipEvents the membership events to store\n     */\n    public async setOutOfBandMembers(roomId: string, membershipEvents: IEvent[]): Promise<void> {\n        logger.log(`LL: backend about to store ${membershipEvents.length}` +\n            ` members for ${roomId}`);\n        const tx = this.db.transaction([\"oob_membership_events\"], \"readwrite\");\n        const store = tx.objectStore(\"oob_membership_events\");\n        membershipEvents.forEach((e) => {\n            store.put(e);\n        });\n        // aside from all the events, we also write a marker object to the store\n        // to mark the fact that OOB members have been written for this room.\n        // It's possible that 0 members need to be written as all where previously know\n        // but we still need to know whether to return null or [] from getOutOfBandMembers\n        // where null means out of band members haven't been stored yet for this room\n        const markerObject = {\n            room_id: roomId,\n            oob_written: true,\n            state_key: 0,\n        };\n        store.put(markerObject);\n        await txnAsPromise(tx);\n        logger.log(`LL: backend done storing for ${roomId}!`);\n    }\n\n    public async clearOutOfBandMembers(roomId: string): Promise<void> {\n        // the approach to delete all members for a room\n        // is to get the min and max state key from the index\n        // for that room, and then delete between those\n        // keys in the store.\n        // this should be way faster than deleting every member\n        // individually for a large room.\n        const readTx = this.db.transaction(\n            [\"oob_membership_events\"],\n            \"readonly\");\n        const store = readTx.objectStore(\"oob_membership_events\");\n        const roomIndex = store.index(\"room\");\n        const roomRange = IDBKeyRange.only(roomId);\n\n        const minStateKeyProm = reqAsCursorPromise(\n            roomIndex.openKeyCursor(roomRange, \"next\"),\n        ).then((cursor) => cursor && cursor.primaryKey[1]);\n        const maxStateKeyProm = reqAsCursorPromise(\n            roomIndex.openKeyCursor(roomRange, \"prev\"),\n        ).then((cursor) => cursor && cursor.primaryKey[1]);\n        const [minStateKey, maxStateKey] = await Promise.all(\n            [minStateKeyProm, maxStateKeyProm]);\n\n        const writeTx = this.db.transaction(\n            [\"oob_membership_events\"],\n            \"readwrite\");\n        const writeStore = writeTx.objectStore(\"oob_membership_events\");\n        const membersKeyRange = IDBKeyRange.bound(\n            [roomId, minStateKey],\n            [roomId, maxStateKey],\n        );\n\n        logger.log(`LL: Deleting all users + marker in storage for room ${roomId}, with key range:`,\n            [roomId, minStateKey], [roomId, maxStateKey]);\n        await reqAsPromise(writeStore.delete(membersKeyRange));\n    }\n\n    /**\n     * Clear the entire database. This should be used when logging out of a client\n     * to prevent mixing data between accounts.\n     * @return {Promise} Resolved when the database is cleared.\n     */\n    public clearDatabase(): Promise<void> {\n        return new Promise((resolve) => {\n            logger.log(`Removing indexeddb instance: ${this.dbName}`);\n            const req = this.indexedDB.deleteDatabase(this.dbName);\n\n            req.onblocked = () => {\n                logger.log(`can't yet delete indexeddb ${this.dbName} because it is open elsewhere`);\n            };\n\n            req.onerror = () => {\n                // in firefox, with indexedDB disabled, this fails with a\n                // DOMError. We treat this as non-fatal, so that we can still\n                // use the app.\n                logger.warn(`unable to delete js-sdk store indexeddb: ${req.error}`);\n                resolve();\n            };\n\n            req.onsuccess = () => {\n                logger.log(`Removed indexeddb instance: ${this.dbName}`);\n                resolve();\n            };\n        });\n    }\n\n    /**\n     * @param {boolean=} copy If false, the data returned is from internal\n     * buffers and must not be mutated. Otherwise, a copy is made before\n     * returning such that the data can be safely mutated. Default: true.\n     *\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync(copy = true): Promise<ISavedSync> {\n        const data = this.syncAccumulator.getJSON();\n        if (!data.nextBatch) return Promise.resolve(null);\n        if (copy) {\n            // We must deep copy the stored data so that the /sync processing code doesn't\n            // corrupt the internal state of the sync accumulator (it adds non-clonable keys)\n            return Promise.resolve(utils.deepCopy(data));\n        } else {\n            return Promise.resolve(data);\n        }\n    }\n\n    public getNextBatchToken(): Promise<string> {\n        return Promise.resolve(this.syncAccumulator.getNextBatchToken());\n    }\n\n    public setSyncData(syncData: ISyncResponse): Promise<void> {\n        return Promise.resolve().then(() => {\n            this.syncAccumulator.accumulate(syncData);\n        });\n    }\n\n    public async syncToDatabase(userTuples: UserTuple[]): Promise<void> {\n        const syncData = this.syncAccumulator.getJSON(true);\n\n        await Promise.all([\n            this.persistUserPresenceEvents(userTuples),\n            this.persistAccountData(syncData.accountData),\n            this.persistSyncData(syncData.nextBatch, syncData.roomsData),\n        ]);\n    }\n\n    /**\n     * Persist rooms /sync data along with the next batch token.\n     * @param {string} nextBatch The next_batch /sync value.\n     * @param {Object} roomsData The 'rooms' /sync data from a SyncAccumulator\n     * @return {Promise} Resolves if the data was persisted.\n     */\n    private persistSyncData(\n        nextBatch: string,\n        roomsData: ISyncResponse[\"rooms\"],\n    ): Promise<void> {\n        logger.log(\"Persisting sync data up to\", nextBatch);\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"sync\"], \"readwrite\");\n            const store = txn.objectStore(\"sync\");\n            store.put({\n                clobber: \"-\", // constant key so will always clobber\n                nextBatch,\n                roomsData,\n            }); // put == UPSERT\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Persist a list of account data events. Events with the same 'type' will\n     * be replaced.\n     * @param {Object[]} accountData An array of raw user-scoped account data events\n     * @return {Promise} Resolves if the events were persisted.\n     */\n    private persistAccountData(accountData: IMinimalEvent[]): Promise<void> {\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"accountData\"], \"readwrite\");\n            const store = txn.objectStore(\"accountData\");\n            for (let i = 0; i < accountData.length; i++) {\n                store.put(accountData[i]); // put == UPSERT\n            }\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Persist a list of [user id, presence event] they are for.\n     * Users with the same 'userId' will be replaced.\n     * Presence events should be the event in its raw form (not the Event\n     * object)\n     * @param {Object[]} tuples An array of [userid, event] tuples\n     * @return {Promise} Resolves if the users were persisted.\n     */\n    private persistUserPresenceEvents(tuples: UserTuple[]): Promise<void> {\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"users\"], \"readwrite\");\n            const store = txn.objectStore(\"users\");\n            for (const tuple of tuples) {\n                store.put({\n                    userId: tuple[0],\n                    event: tuple[1],\n                }); // put == UPSERT\n            }\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Load all user presence events from the database. This is not cached.\n     * FIXME: It would probably be more sensible to store the events in the\n     * sync.\n     * @return {Promise<Object[]>} A list of presence events in their raw form.\n     */\n    public getUserPresenceEvents(): Promise<UserTuple[]> {\n        return utils.promiseTry<UserTuple[]>(() => {\n            const txn = this.db.transaction([\"users\"], \"readonly\");\n            const store = txn.objectStore(\"users\");\n            return selectQuery(store, undefined, (cursor) => {\n                return [cursor.value.userId, cursor.value.event];\n            });\n        });\n    }\n\n    /**\n     * Load all the account data events from the database. This is not cached.\n     * @return {Promise<Object[]>} A list of raw global account events.\n     */\n    private loadAccountData(): Promise<IMinimalEvent[]> {\n        logger.log(`LocalIndexedDBStoreBackend: loading account data...`);\n        return utils.promiseTry<IMinimalEvent[]>(() => {\n            const txn = this.db.transaction([\"accountData\"], \"readonly\");\n            const store = txn.objectStore(\"accountData\");\n            return selectQuery(store, undefined, (cursor) => {\n                return cursor.value;\n            }).then((result: IMinimalEvent[]) => {\n                logger.log(`LocalIndexedDBStoreBackend: loaded account data`);\n                return result;\n            });\n        });\n    }\n\n    /**\n     * Load the sync data from the database.\n     * @return {Promise<Object>} An object with \"roomsData\" and \"nextBatch\" keys.\n     */\n    private loadSyncData(): Promise<ISyncData> {\n        logger.log(`LocalIndexedDBStoreBackend: loading sync data...`);\n        return utils.promiseTry<ISyncData>(() => {\n            const txn = this.db.transaction([\"sync\"], \"readonly\");\n            const store = txn.objectStore(\"sync\");\n            return selectQuery(store, undefined, (cursor) => {\n                return cursor.value;\n            }).then((results: ISyncData[]) => {\n                logger.log(`LocalIndexedDBStoreBackend: loaded sync data`);\n                if (results.length > 1) {\n                    logger.warn(\"loadSyncData: More than 1 sync row found.\");\n                }\n                return results.length > 0 ? results[0] : {} as ISyncData;\n            });\n        });\n    }\n\n    public getClientOptions(): Promise<IStartClientOpts> {\n        return Promise.resolve().then(() => {\n            const txn = this.db.transaction([\"client_options\"], \"readonly\");\n            const store = txn.objectStore(\"client_options\");\n            return selectQuery(store, undefined, (cursor) => {\n                if (cursor.value && cursor.value && cursor.value.options) {\n                    return cursor.value.options;\n                }\n            }).then((results) => results[0]);\n        });\n    }\n\n    public async storeClientOptions(options: IStartClientOpts): Promise<void> {\n        const txn = this.db.transaction([\"client_options\"], \"readwrite\");\n        const store = txn.objectStore(\"client_options\");\n        store.put({\n            clobber: \"-\", // constant key so will always clobber\n            options: options,\n        }); // put == UPSERT\n        await txnAsPromise(txn);\n    }\n}\n","/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { LocalIndexedDBStoreBackend } from \"./indexeddb-local-backend\";\nimport { logger } from '../logger';\n\ninterface ICmd {\n    command: string;\n    seq: number;\n    args?: any[];\n}\n\n/**\n * This class lives in the webworker and drives a LocalIndexedDBStoreBackend\n * controlled by messages from the main process.\n *\n * It should be instantiated by a web worker script provided by the application\n * in a script, for example:\n *\n * import {IndexedDBStoreWorker} from 'matrix-js-sdk/lib/indexeddb-worker.js';\n * const remoteWorker = new IndexedDBStoreWorker(postMessage);\n * onmessage = remoteWorker.onMessage;\n *\n * Note that it is advisable to import this class by referencing the file directly to\n * avoid a dependency on the whole js-sdk.\n *\n */\nexport class IndexedDBStoreWorker {\n    private backend: LocalIndexedDBStoreBackend = null;\n\n    /**\n     * @param {function} postMessage The web worker postMessage function that\n     * should be used to communicate back to the main script.\n     */\n    constructor(private readonly postMessage: InstanceType<typeof Worker>[\"postMessage\"]) {}\n\n    /**\n     * Passes a message event from the main script into the class. This method\n     * can be directly assigned to the web worker `onmessage` variable.\n     *\n     * @param {Object} ev The message event\n     */\n    public onMessage = (ev: MessageEvent): void => {\n        const msg: ICmd = ev.data;\n        let prom;\n\n        switch (msg.command) {\n            case '_setupWorker':\n                // this is the 'indexedDB' global (where global != window\n                // because it's a web worker and there is no window).\n                this.backend = new LocalIndexedDBStoreBackend(indexedDB, msg.args[0]);\n                prom = Promise.resolve();\n                break;\n            case 'connect':\n                prom = this.backend.connect();\n                break;\n            case 'isNewlyCreated':\n                prom = this.backend.isNewlyCreated();\n                break;\n            case 'clearDatabase':\n                prom = this.backend.clearDatabase();\n                break;\n            case 'getSavedSync':\n                prom = this.backend.getSavedSync(false);\n                break;\n            case 'setSyncData':\n                prom = this.backend.setSyncData(msg.args[0]);\n                break;\n            case 'syncToDatabase':\n                prom = this.backend.syncToDatabase(msg.args[0]);\n                break;\n            case 'getUserPresenceEvents':\n                prom = this.backend.getUserPresenceEvents();\n                break;\n            case 'getNextBatchToken':\n                prom = this.backend.getNextBatchToken();\n                break;\n            case 'getOutOfBandMembers':\n                prom = this.backend.getOutOfBandMembers(msg.args[0]);\n                break;\n            case 'clearOutOfBandMembers':\n                prom = this.backend.clearOutOfBandMembers(msg.args[0]);\n                break;\n            case 'setOutOfBandMembers':\n                prom = this.backend.setOutOfBandMembers(msg.args[0], msg.args[1]);\n                break;\n            case 'getClientOptions':\n                prom = this.backend.getClientOptions();\n                break;\n            case 'storeClientOptions':\n                prom = this.backend.storeClientOptions(msg.args[0]);\n                break;\n        }\n\n        if (prom === undefined) {\n            this.postMessage({\n                command: 'cmd_fail',\n                seq: msg.seq,\n                // Can't be an Error because they're not structured cloneable\n                error: \"Unrecognised command\",\n            });\n            return;\n        }\n\n        prom.then((ret) => {\n            this.postMessage.call(null, {\n                command: 'cmd_success',\n                seq: msg.seq,\n                result: ret,\n            });\n        }, (err) => {\n            logger.error(\"Error running command: \" + msg.command);\n            logger.error(err);\n            this.postMessage.call(null, {\n                command: 'cmd_fail',\n                seq: msg.seq,\n                // Just send a string because Error objects aren't cloneable\n                error: {\n                    message: err.message,\n                    name: err.name,\n                },\n            });\n        });\n    };\n}\n","/*\nCopyright 2017 Vector Creations Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Separate exports file for the indexeddb web worker, which is designed\n * to be used separately\n */\n\n/** The {@link module:indexeddb-store-worker~IndexedDBStoreWorker} class. */\nexport { IndexedDBStoreWorker } from \"./store/indexeddb-store-worker\";\n\n","/*\nCopyright 2017 Vector Creations Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IndexedDBStoreWorker } from \"matrix-js-sdk/src/indexeddb-worker\";\n\nconst ctx: Worker = self as any;\n\nconst remoteWorker = new IndexedDBStoreWorker(ctx.postMessage);\n\nctx.onmessage = remoteWorker.onMessage;\n"],"sourceRoot":""}